# AUTOGENERATED COPYRIGHT HEADER START
# Copyright (C) 2023-2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
# AUTOGENERATED COPYRIGHT HEADER END
# Copyright 2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>

################################################################################
# Bootstrap
################################################################################
cmake_minimum_required(VERSION 3.26)

# Limit to Release and Debug (Steinberg messes with this too)
set(CMAKE_CONFIGURATION_TYPES "Release" "Debug")

project(TonPlugIns)
list(APPEND CMAKE_MESSAGE_INDENT "[${PROJECT_NAME}] ")

# Search Paths
list(APPEND CMAKE_MODULE_PATH
	"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules"
	"${CMAKE_CURRENT_SOURCE_DIR}/cmake"
)

# Include required Modules
# - Stock
include("CheckIPOSupported")
# - Custom
include("util")
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/cmake-version/version.cmake")
	include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/cmake-version/version.cmake")
else()
	message(FATAL_ERROR "Please ensure you've cloned recursively and try again. Thank you!")
endif()

# Include optional Modules
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/cmake-clang/Clang.cmake")
	include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/cmake-clang/Clang.cmake")
endif()

################################################################################
# Options
################################################################################

# Allow overriding version
set(VERSION "" CACHE STRING "Override detected or pre-configured version with this string. Accepts strings in CMake and SemVer 2.0.0 format.")

# Enable all features?
set(ENABLE_FULL_VERSION ON CACHE BOOL "Enable the full feature set? (Do not enable for Demo/Free builds!)")

################################################################################
# Versioning
################################################################################

function(detect_version p_prefix p_version)
	version(GENERATE _VERSION COMPRESSED MAJOR 0 MINOR 0 PATCH 0 REQUIRE "PATCH;")
	version(PARSE _VERSION "${_VERSION}" REQUIRE "PATCH;")

	# If possible, automatically generate versions from git.
	if(EXISTS "${CMAKE_SOURCE_DIR}/.git")
		find_program(GIT
			NAMES
				git
				git.exe
		)

		if(EXISTS "${GIT}")
			# Try and calculate the exist version using git.
			execute_process(
				COMMAND "${GIT}" describe --tags --long --abbrev=8 HEAD
				WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
				RESULT_VARIABLE GIT_RESULT
				OUTPUT_VARIABLE GIT_OUTPUT
				ERROR_VARIABLE GIT_ERROR
				OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE ERROR_QUIET
			)
			if((GIT_RESULT EQUAL 0) AND (NOT "${GIT_OUTPUT}" STREQUAL ""))
				# Tags are guaranteed to be MAJOR.MINOR.PATCH(-PRERELEASE)-COMMITS-gHASH
				string(REPLACE "-g" "+g" GIT_OUTPUT "${GIT_OUTPUT}") # Ensure gHASH ends up as build.
				version(PARSE _GIT_VERSION "${GIT_OUTPUT}" REQUIRE "PATCH;")

				# Properly format the Pre-Release data
				if(_GIT_VERSION_PRERELEASE MATCHES "([a-zA-Z\-]+)\.([0-9]+)-([0-9]+)")
					if(NOT CMAKE_MATCH_3 EQUAL 0)
						# Add Pre-Release numbers together
						math(EXPR _GIT_VERSION_PRERELEASE "${CMAKE_MATCH_2} + ${CMAKE_MATCH_3}")
						set(_GIT_VERSION_PRERELEASE "${CMAKE_MATCH_1}.${_GIT_VERSION_PRERELEASE}")
					endif()
				else()
					if(NOT _GIT_VERSION_PRERELEASE EQUAL 0)
						set(_GIT_VERSION_PRERELEASE "alpha.${_GIT_VERSION_PRERELEASE}")
					else()
						set(_GIT_VERSION_PRERELEASE "")
					endif()
				endif()

				# Modify the global version
				version(MODIFY _VERSION "${_VERSION}"
					MAJOR "${_GIT_VERSION_MAJOR}"
					MINOR "${_GIT_VERSION_MINOR}"
					PATCH "${_GIT_VERSION_PATCH}"
					PRERELEASE "${_GIT_VERSION_PRERELEASE}"
					BUILD "${_GIT_VERSION_BUILD}"
					REQUIRE "PATCH;"
				)
			else()
				execute_process(
					COMMAND "${GIT}" rev-list --count HEAD
					WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
					RESULT_VARIABLE GIT_RESULT
					OUTPUT_VARIABLE GIT_OUTPUT
					ERROR_VARIABLE GIT_ERROR
					OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE ERROR_QUIET
				)
				if((GIT_RESULT EQUAL 0) AND (NOT "${GIT_OUTPUT}" STREQUAL ""))
					version(MODIFY _VERSION "${_VERSION}"
						PRERELEASE "alpha.${GIT_OUTPUT}"
						REQUIRE "PATCH;"
					)

					# Determine the build using git.
					execute_process(
						COMMAND "${GIT}" log -1 "--pretty=format:g%h" --abbrev=8 HEAD
						WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
						RESULT_VARIABLE GIT_RESULT
						OUTPUT_VARIABLE GIT_OUTPUT
						ERROR_VARIABLE GIT_ERROR
						OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE ERROR_QUIET
					)
					if((GIT_RESULT EQUAL 0) AND (NOT "${GIT_OUTPUT}" STREQUAL ""))
						version(MODIFY _VERSION "${_VERSION}"
							BUILD "${GIT_OUTPUT}"
							REQUIRE "PATCH;"
						)
					else()
						message(WARNING "Failed to detect build version with 'git'.")
					endif()
				else()
					message(WARNING "Failed to automatically detect version with 'git'.")
				endif()
			endif()
		else()
			message(WARNING "'git' not found, automatic version detection disabled.")
		endif()
	else()
		message(STATUS "Not a git repository, automatic version detection disabled.")
	endif()

	# Allow manual overrides of the detected version.
	if(${p_version})
		version(PARSE _VERSION_CFG "${p_version}" REQUIRE "PATCH;")
		if("${_VERSION_CFG_BUILD}" STREQUAL "")
			set(_VERSION_CFG_BUILD "${_VERSION_BUILD}")
		endif()
		version(GENERATE _VERSION
			MAJOR "${_VERSION_CFG_MAJOR}"
			MINOR "${_VERSION_CFG_MINOR}"
			PATCH "${_VERSION_CFG_PATCH}"
			PRERELEASE "${_VERSION_CFG_PRERELEASE}"
			BUILD "${_VERSION_CFG_BUILD}"
		)
	endif()

	# Fix up missing parts of the Version
	version(PARSE _VERSION "${_VERSION}" REQUIRE "PATCH;")

	# - Generate a version number compatible with CMake
	string(REGEX MATCH "[a-zA-Z0-9\-]+\.([0-9]+)" _TMP "${_VERSION_PRERELEASE}")
	version(GENERATE PROJECT_VERSION
		MAJOR "${_VERSION_MAJOR}"
		MINOR "${_VERSION_MINOR}"
		PATCH "${_VERSION_PATCH}"
		TWEAK "${CMAKE_MATCH_1}"
		REQUIRE "PATCH;TWEAK"
	)

	set(${p_prefix}_VERSION "${PROJECT_VERSION}" CACHE INTERNAL "")
	set(${p_prefix}_SEMANTIC_VERSION "${_VERSION}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_MAJOR "${_VERSION_MAJOR}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_MINOR "${_VERSION_MINOR}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_PATCH "${_VERSION_PATCH}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_TWEAK "${PROJECT_VERSION_TWEAK}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_BUILD "${_VERSION_BUILD}" CACHE INTERNAL "")
	set(${p_prefix}_VERSION_PRERELEASE "${_VERSION_PRERELEASE}" CACHE INTERNAL "")
endfunction()

# Allow manual overrides of the detected version.
detect_version(${PROJECT_NAME} "VERSION")

# Parse & Log the detected version.
message(STATUS "Version ${${CMAKE_PROJECT_NAME}_SEMANTIC_VERSION} (${${CMAKE_PROJECT_NAME}_VERSION})")

################################################################################
# Project
################################################################################

# Project and Metadata
project(
	TonPlugIns
	LANGUAGES CXX;C
	VERSION "${PROJECT_VERSION}"
	DESCRIPTION "TonPlugIns is a collection of plug-ins for audio software."
	HOMEPAGE_URL "https://tonplugins.xaymar.com/"
)
set(PROJECT_TITLE "TonPlugIns")
set(PROJECT_AUTHORS "Michael Fabian 'Xaymar' Dirks <info@xaymar.com>")
set(PROJECT_COPYRIGHT "2020, Michael Fabian Dirks. All Rights Reserved")
set(PROJECT_TRADEMARKS "VSTÂ® is a registered trademark of Steinberg Media Technologies GmbH")
set(PROJECT_SOURCE "")
set(PROJECT_SOURCE_GENERATED "")
set(PROJECT_TEMPLATES "")
set(PROJECT_INCLUDES "")
set(PROJECT_LIBRARIES "")

# If this is not a full version, add the "(Demo)" suffix.
if(NOT ENABLE_FULL_VERSION)
	set(PROJECT_TITLE "${PROJECT_TITLE} (Demo)")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	# MacOS: We must target MacOS 10.15 or later.
	if(CMAKE_OSX_DEPLOYMENT_TARGET VERSION_LESS 10.15)
		set(CMAKE_OSX_DEPLOYMENT_TARGET 10.15 CACHE STRING "" FORCE)
	endif()

	# MacOS: We must target all architectures always.
	set(CMAKE_OSX_ARCHITECTURES "x86_64;arm64" CACHE STRING "" FORCE)
endif()

# Detect the target architecture. (CMAKE_SYSTEM_ARCHITECTURE can't be trusted.)
try_compile(ARCH_RES
	SOURCES "${PROJECT_SOURCE_DIR}/cmake/architecture.c"
	NO_LOG
	OUTPUT_VARIABLE ARCH_OUT
)
string(REGEX MATCH "TARGET_SYSTEM_ARCHITECTURE=([a-zA-Z0-9_\-]+)" ARCH_OUT ${ARCH_OUT})
set(TARGET_SYSTEM_ARCHITECTURE "${CMAKE_MATCH_1}")
if(TARGET_SYSTEM_ARCHITECTURE STREQUAL "x86_64")
	set(TARGET_SYSTEM_IS_X86 ON)
	set(TARGET_SYSTEM_IS_64BIT ON)
elseif(TARGET_SYSTEM_ARCHITECTURE STREQUAL "x86_32")
	set(TARGET_SYSTEM_IS_X86 ON)
	set(TARGET_SYSTEM_IS_64BIT OFF)
elseif(TARGET_SYSTEM_ARCHITECTURE STREQUAL "arm64ec")
	set(TARGET_SYSTEM_IS_ARM ON)
	set(TARGET_SYSTEM_IS_X86 ON)
	set(TARGET_SYSTEM_IS_64BIT ON)
elseif(TARGET_SYSTEM_ARCHITECTURE STREQUAL "arm64")
	set(TARGET_SYSTEM_IS_ARM ON)
	set(TARGET_SYSTEM_IS_64BIT ON)
elseif(TARGET_SYSTEM_ARCHITECTURE MATCHES "^arm")
	set(TARGET_SYSTEM_IS_ARM ON)
	set(TARGET_SYSTEM_IS_64BIT OFF)
else()
endif()

# Set default Install prefix
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
	if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		set(CMAKE_INSTALL_PREFIX "$ENV{COMMONPROGRAMFILES}/" CACHE PATH "Install location" FORCE)
	endif()
	set(INSTALL_PREFIX_VST3 "VST3")
	set(INSTALL_PREFIX_VST2 "VST2")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
	if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		set(CMAKE_INSTALL_PREFIX "/Library/Audio/Plug-ins/" CACHE PATH "Install location" FORCE)
	endif()
	set(INSTALL_PREFIX_VST3 "VST3")
	set(INSTALL_PREFIX_VST2 "VST2")
else()
	if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		set(CMAKE_INSTALL_PREFIX "/usr/lib/" CACHE PATH "Install location" FORCE)
	endif()
	set(INSTALL_PREFIX_VST3 "vst3")
	set(INSTALL_PREFIX_VST2 "vst2")
endif()

# Find InnoSetup
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	function(is_valid_innosetup result path)
		if(EXISTS "${path}/ISCC.exe")
			set(${result} TRUE PARENT_SCOPE)
		else()
			set(${result} FALSE PARENT_SCOPE)
		endif()		
	endfunction()

	find_path(
		ISS_PATH
		NAMES
			ISCC.exe
		HINTS
			"/root/HKLM/SOFTWARE/WOW6432Node/Microsoft/Windows/CurrentVersion/Uninstall/Inno Setup 6_is1/InstallLocation"
			"C:/Program Files (x86)/Inno Setup 6"
			"C:/Program Files/Inno Setup 6"
		REGISTRY_VIEW HOST
		DOC "Path to ISCC.exe from InnoSetup"
	)
	# "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\Inno Setup 6_is1"
endif()

################################################################################
# Functions
################################################################################

macro(propagate name)
	set(${name} "${${name}}" PARENT_SCOPE)
endmacro()

function(define_target p_name p_type)
	add_library(${p_name} ${p_type})
	add_library(${CMAKE_PROJECT_NAME}::${p_name} ALIAS ${p_name})

	if (PROJECT_NAME STREQUAL p_name) # Versioning
		string(TOUPPER "${p_name}" u_name)
		string(TOLOWER "${p_name}" l_name)
		detect_version(${CMAKE_PROJECT_NAME}_${p_name} "${${u_name}_VERSION}")
		message(STATUS "Version ${${CMAKE_PROJECT_NAME}_${p_name}_SEMANTIC_VERSION} (${${CMAKE_PROJECT_NAME}_${p_name}_VERSION})")

		project(${p_name}
			VERSION ${${CMAKE_PROJECT_NAME}_${p_name}_VERSION}
		)
		list(JOIN _VERSION_PRERELEASE "." _VERSION_PRERELEASE)
		list(JOIN _VERSION_BUILD "." _VERSION_BUILD)
		target_compile_definitions(${p_name} PUBLIC
			TONPLUGINS_${u_name}_VERSION="${${CMAKE_PROJECT_NAME}_${p_name}_SEMANTIC_VERSION}"
			TONPLUGINS_${u_name}_VERSION_MAJOR=${${CMAKE_PROJECT_NAME}_${p_name}_VERSION_MAJOR}
			TONPLUGINS_${u_name}_VERSION_MINOR=${${CMAKE_PROJECT_NAME}_${p_name}_VERSION_MINOR}
			TONPLUGINS_${u_name}_VERSION_PATCH=${${CMAKE_PROJECT_NAME}_${p_name}_VERSION_PATCH}
			TONPLUGINS_${u_name}_VERSION_PRERELEASE="${${CMAKE_PROJECT_NAME}_${p_name}_VERSION_PRERELEASE}"
			TONPLUGINS_${u_name}_VERSION_BUILD="${${CMAKE_PROJECT_NAME}_${p_name}_VERSION_BUILD}"
			TONPLUGINS_${u_name}_VERSION_CMAKE="${${CMAKE_PROJECT_NAME}_${p_name}_VERSION}"
		)
	endif()
	if(WIN32)
		configure_file(
			"${CMAKE_SOURCE_DIR}/templates/include/version.rc.in"
			"include/version.rc"
		)
	endif()

	if(NOT ENABLE_FULL_VERSION)
		target_compile_definitions(${p_name} PUBLIC
			TONPLUGINS_DEMO
		)
	endif()

	set_target_properties(${p_name} PROPERTIES
		# Remove platform specific prefixes.
		PREFIX ""
		IMPORT_PREFIX ""

		# Version
		MACHO_COMPATIBILITY_VERSION ${_VERSION_MAJOR}.${_VERSION_MINOR}
		MACHO_CURRENT_VERSION ${PROJECT_VERSION}
		SOVERSION ${_VERSION_MAJOR}.${_VERSION_MINOR}
		VERSION ${PROJECT_VERSION}
	)

	target_include_directories(${p_name}
		PRIVATE
			"${${p_name}_SOURCE_DIR}/source"
			"${${p_name}_BINARY_DIR}/source"
		PUBLIC
			"${${p_name}_SOURCE_DIR}/include"
			"${${p_name}_BINARY_DIR}/include"
	)

	# Architecture and Bitness
	if(TARGET_SYSTEM_IS_ARM)
		target_compile_definitions(${p_name} PUBLIC TONPLUGINS_ARCH_ARM)
	endif()
	if(TARGET_SYSTEM_IS_X86)
		target_compile_definitions(${p_name} PUBLIC TONPLUGINS_ARCH_X86)
	endif()
	if(TARGET_SYSTEM_IS_64BIT)
		target_compile_definitions(${p_name} PUBLIC TONPLUGINS_ARCH_64BIT)
	endif()

	# Don't clutter the export table with useless exports.
	if(MSVC)
		# Appears to be the default.
	else()
		add_compile_options("-fvisibility=hidden")
	endif()

	setup_target_compiler(${p_name})
endfunction()

function(setup_target_compiler p_name)
	# Adjust properties and compiler flags
	set_target_properties(${p_name} PROPERTIES
		# Always generate position independent code.
		POSITION_INDEPENDENT_CODE ON
		# Set C++ Standard and Extensions
		C_STANDARD 17
		C_STANDARD_REQUIRED ON
		CXX_STANDARD 23
		CXX_STANDARD_REQUIRED ON
		CXX_EXTENSIONS OFF
		# Always try to optimize at link-time
		INTERPROCEDURAL_OPTIMIZATION ON
	)
	target_compile_definitions(${p_name} PRIVATE
		__STDC_WANT_LIB_EXT1__=1
		SMTG_CPP_17
	)
	if(MSVC)
		target_compile_options(${p_name} PRIVATE
			# Allow multi-processor compiling.
			"/MP"
			# Enable C++ exceptions with SEH exceptions.
			"/EHa"
			# Enable updated __cplusplus macro
			"/Zc:__cplusplus"
			# Use static CRT
			$<$<CONFIG:Debug>:/MTd>
			$<$<CONFIG:Release>:/MT>
			# Enable Function Level Linking
			"/Gy"
		)
		target_compile_definitions(${p_name} PRIVATE
			# We want C++, not MSVC++.
			_CRT_SECURE_NO_WARNINGS
			_ENABLE_EXTENDED_ALIGNED_STORAGE
			# Windows.h fixes
			WIN32_LEAN_AND_MEAN
			NOMINMAX
			NOINOUT
			# Unicode
			UNICODE
		)
	endif()

	# Always use fast math over precise math.
	if(MSVC)
		target_compile_options(${p_name} PRIVATE "/fp:fast")
	elseif(GNU)
		target_compile_options(${p_name} PRIVATE "-ffast-math")
	elseif(Clang)
		target_compile_options(${p_name} PRIVATE "-ffp-model=fast")
	elseif(AppleClang)
		# Appears to be the default.
	else()
		message(WARNING "Unknown compiler, unable to guarantee faster math processing.")
	endif()

	# Enable a number of warnings
	if(MSVC)
		target_compile_options(${p_name} PRIVATE
			"/Wall"
			# Don't warn about unused variables, parameters, labels, functions, or typedefs.
			"/wd4100"
			"/wd4101"
			"/wd4102"
			"/wd4505"
			"/wd4514"
			"/wd5245"
			# Don't warn about unreferenced variables or parameters which are assigned/initialized.
			"/wd4189"
			# Don't warn about not-explicitly-handled enumeration identifiers
			"/wd4061"
			# Ignore automatic padding warnings.
			"/wd4820"
			# Ignore assignment/move/copy being implicit '= delete;'.
			"/wd4623"
			"/wd4625"
			"/wd4626"
			"/wd5026"
			"/wd5027"
			# Relative include paths are fine.
			"/wd4464"
			# Buggy warning: printf expects string literal
			"/wd4774"
			# Buggy warning: subobject initialization should be wrapped in braces
			"/wd5246"
			# Ignore undefined, unused or unreferenced pre-processor macros
			"/wd4688"
			# Ignore non-inlined functions
			"/wd4710"
			# Ignore Spectre mitigation insertions
			"/wd5045"
			# Ignore inserted padding.
			"/wd4324"
		)
	elseif(GNU OR Clang)
		target_compile_options(${p_name} PRIVATE
			"-Wall"
			"-Wextra"
			# Don't warn about unused variables, parameters, labels, functions, or typedefs.
			"-Wno-unused-function"
			"-Wno-unused-label"
			"-Wno-unused-local-typedefs"
			"-Wno-unused-parameter"
			"-Wno-unused-result"
			"-Wno-unused-const-variable"
			"-Wno-unused-variable"
			"-Wno-unused-value"
			# Don't warn about unreferenced variables or parameters which are assigned/initialized.
			"-Wno-unused-but-set-parameter"
			"-Wno-unused-but-set-variable"
			# Don't warn about not-explicitly-handled enumeration identifiers
			"-Wno-switch"
			# Ignore automatic padding warnings.
			"-Wno-padded"
			# Ignore implicit '= delete;'.
			# Ignore extra arguments for printf
			"-Wno-format-extra-args"
			# Ignore undefined, unused or unreferenced pre-processor macros
			"-Wno-unused-macros"
		)
	elseif(AppleClang)
		target_compile_options(${p_name} PRIVATE
			"-Wall"
			"-Wextra"
			# Don't warn about unused variables, parameters, labels, functions, or typedefs.
			"-Wno-unused-function"
			"-Wno-unused-label"
			"-Wno-unused-local-typedefs"
			"-Wno-unused-parameter"
			"-Wno-unused-result"
			"-Wno-unused-const-variable"
			"-Wno-unused-variable"
			"-Wno-unused-value"
			# Don't warn about unreferenced variables or parameters which are assigned/initialized.
			"-Wno-unused-but-set-parameter"
			"-Wno-unused-but-set-variable"
			# Don't warn about not-explicitly-handled enumeration identifiers
			"-Wno-switch"
			# Ignore automatic padding warnings.
			"-Wno-padded"
			# Ignore implicit '= delete;'.
			# Ignore extra arguments for printf
			"-Wno-format-extra-args"
			# Ignore undefined, unused or unreferenced pre-processor macros
			"-Wno-unused-macros"
		)
	endif()
endfunction()

function(setup_target p_name)
	# Common structure between all targets.
	file(GLOB_RECURSE TEMPLATES FOLLOW_SYMLINKS CONFIGURE_DEPENDS "templates/*")
	source_group(TREE "${${p_name}_SOURCE_DIR}/templates" PREFIX "Templates" FILES ${TEMPLATES})

	file(GLOB_RECURSE RESOURCES FOLLOW_SYMLINKS CONFIGURE_DEPENDS "resources/*")
	source_group(TREE "${${p_name}_SOURCE_DIR}/resources" PREFIX "Resources" FILES ${RESOURCES})
	file(GLOB_RECURSE RESOURCES FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${${p_name}_BINARY_DIR}/resources/*")
	source_group(TREE "${${p_name}_BINARY_DIR}/resources" PREFIX "Resources/Generated" FILES ${GENERATED_RESOURCES})

	file(GLOB_RECURSE SOURCE_PRIVATE FOLLOW_SYMLINKS CONFIGURE_DEPENDS "source/*")
	source_group(TREE "${${p_name}_SOURCE_DIR}/source" PREFIX "Source Files" FILES ${SOURCE_PRIVATE})
	file(GLOB_RECURSE GENERATED_PRIVATE FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${${p_name}_BINARY_DIR}/source/*")
	source_group(TREE "${${p_name}_BINARY_DIR}/source" PREFIX "Source Files/Generated" FILES ${GENERATED_PRIVATE})

	file(GLOB_RECURSE SOURCE_PUBLIC FOLLOW_SYMLINKS CONFIGURE_DEPENDS "include/*")
	source_group(TREE "${${p_name}_SOURCE_DIR}/include" PREFIX "Header Files" FILES ${SOURCE_PUBLIC})
	file(GLOB_RECURSE GENERATED_PUBLIC FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${${p_name}_BINARY_DIR}/include/*")
	source_group(TREE "${${p_name}_BINARY_DIR}/include" PREFIX "Header Files/Generated" FILES ${GENERATED_PUBLIC})

	target_sources(${p_name}
		PRIVATE
			${TEMPLATES}
			${RESOURCES}
			${GENERATED_RESOURCES}
			${SOURCE_PRIVATE}
			${GENERATED_PRIVATE}
			${SOURCE_PUBLIC}
			${GENERATED_PUBLIC}
	)

	set_source_files_properties(${TEMPLATES} ${RESOURCES} ${GENERATED_RESOURCES} PROPERTIES
		HEADER_FILE_ONLY ON
	)

	# Integrate with clang-format and clang-tidy
	if(COMMAND generate_compile_commands_json)
		generate_compile_commands_json(
			TARGETS ${p_name}
		)
		if(COMMAND clang_format)
			clang_format(
				TARGETS ${p_name}
				DEPENDENCY
				VERSION 9.0.0
			)
		endif()
	endif()
endfunction()

function(define_library p_name)
	message(STATUS "Defining library '${p_name}'...")
	define_target(${p_name} STATIC)
	set_target_properties(${p_name} PROPERTIES
		FOLDER "TonPlugins/Libraries"
		PROJECT_LABEL "${p_name}"
	)
endfunction()

function(calculate_install_path p_name p_contentvar p_resourcevar p_binvar)
	set(_content_path "Contents")
	set(_resource_path "${_content_path}/Resources")
	set(_binary_path "${_content_path}/")
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		if(TARGET_SYSTEM_IS_X86 AND TARGET_SYSTEM_IS_ARM)
			set(_binary_path "${_binary_path}arm64ec")
		elseif(TARGET_SYSTEM_IS_X86 AND TARGET_SYSTEM_IS_64BIT)
			set(_binary_path "${_binary_path}x86_64")
		elseif(TARGET_SYSTEM_IS_ARM AND TARGET_SYSTEM_IS_64BIT)
			set(_binary_path "${_binary_path}arm64")
		elseif(TARGET_SYSTEM_IS_X86)
			set(_binary_path "${_binary_path}x86")
		elseif(TARGET_SYSTEM_IS_ARM)
			set(_binary_path "${_binary_path}arm")
		else()
			set(_binary_path "${_binary_path}unknown")
		endif()
		set(_binary_path "${_binary_path}-win")
	elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
		if(TARGET_SYSTEM_IS_X86 AND TARGET_SYSTEM_IS_64BIT)
			set(_binary_path "${_binary_path}x86_64")
		elseif(TARGET_SYSTEM_IS_ARM AND TARGET_SYSTEM_IS_64BIT)
			set(_binary_path "${_binary_path}aarch64")
		elseif(TARGET_SYSTEM_IS_X86)
			set(_binary_path "${_binary_path}i386")
		elseif(TARGET_SYSTEM_IS_ARM)
			set(_binary_path "${_binary_path}arm")
		else()
			set(_binary_path "${_binary_path}unknown")
		endif()
		set(_binary_path "${_binary_path}-linux")
	elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
		set(_binary_path "${_binary_path}MacOS")
	else()
		set(_binary_path "${_binary_path}Unknown")
	endif()

	set(${p_contentvar} ${_content_path} PARENT_SCOPE)
	set(${p_resourcevar} ${_resource_path} PARENT_SCOPE)
	set(${p_binvar} ${_binary_path} PARENT_SCOPE)
endfunction()

function(generate_guid p_name p_out)
	string(MD5 _tmp "${p_name}")
	string(REGEX REPLACE "([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])" "\\1-\\2-\\3-\\4-\\5" _tmp "${_tmp}")
	string(TOUPPER "${_tmp}" _tmp)
	set(${p_out} "${_tmp}" PARENT_SCOPE)
endfunction()

function(define_interface_vst3)
	cmake_parse_arguments(PARSE_ARGV 0
		_ARGS
		""
		"NAME;UUID"
		""
	)
	if(NOT _ARGS_UUID)
		generate_guid("${_ARGS_NAME}.vst3" _ARGS_UUID)
	endif()
	message(STATUS "VST 3.x UUID is ${_ARGS_UUID}")

	# Add compile definition so the target knows we're building VST3s.
	target_compile_definitions(${_ARGS_NAME} PRIVATE
		TONPLUGINS_VST3
	)

	# Add some special files
	if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
		target_sources(${p_name} PRIVATE
			"${CMAKE_SOURCE_DIR}/third-party/vst3sdk/public.sdk/source/main/macexport.exp"
		)
	endif()

	# VST3 Specific requirements
	set_target_properties(${p_name} PROPERTIES
		# MacOS requires this to be a bundle.
		BUNDLE ON
		BUNDLE_EXTENSION ".vst3"
	)
	if(APPLE)
		set_target_properties(${p_name} PROPERTIES
			# VST3 musts have no suffix.
			SUFFIX ""
		)
	endif()

	# Add as a dependency to the VST3 build target
	add_dependencies(VST3 ${_ARGS_NAME})

	# Packaging/Installing
	calculate_install_path("${_ARGS_NAME}.vst3" _content_path _resource_path _binary_path)
	if(NOT APPLE)
		foreach(_V INSTALL;INSTALLER)
			if(_V STREQUAL "INSTALL")
				set(_path "${INSTALL_PREFIX_VST3}/TonPlugins/${_ARGS_NAME}.vst3/")
				set(_install_args "")
			else()
				set(_path "")
				set(_install_args "COMPONENT ${_ARGS_NAME}.Installer.VST3 EXCLUDE_FROM_ALL")
			endif()

			# - Resources
			cmake_language(EVAL CODE "install(
				DIRECTORY \"${${_ARGS_NAME}_SOURCE_DIR}/resources/\"
				DESTINATION \"${_path}${_resource_path}\"
				USE_SOURCE_PERMISSIONS OPTIONAL
				${_install_args})"
			)
			cmake_language(EVAL CODE "install(
				DIRECTORY \"${${_ARGS_NAME}_BINARY_DIR}/resources/\"
				DESTINATION \"${_path}${_resource_path}\"
				USE_SOURCE_PERMISSIONS OPTIONAL
				${_install_args})"
			)

			# - Binaries
			cmake_language(EVAL CODE "install(
				FILES \"$<TARGET_FILE:${_ARGS_NAME}>\"
				DESTINATION \"${_path}${_binary_path}\"
				RENAME \"$<TARGET_FILE_BASE_NAME:${_ARGS_NAME}>.vst3\"
				${_install_args})"
			)
			if(MSVC)
				cmake_language(EVAL CODE "install(
					FILES \"$<TARGET_PDB_FILE:${_ARGS_NAME}>\"
					DESTINATION \"${_path}${_binary_path}\"
					OPTIONAL
					${_install_args})"
				)
			endif()

			# - Extra Files
			if(D_PLATFORM_WINDOWS)
				# 'desktop.ini'
				cmake_language(EVAL CODE "install(
					FILES \"other/desktop.ini\"
					DESTINATION \"${_path}\"
					USE_SOURCE_PERMISSIONS
					OPTIONAL
					${_install_args})"
				)

				# 'icon.ico'
				cmake_language(EVAL CODE "install(
					FILES \"other/icon.ico\"
					DESTINATION \"${_path}\"
					USE_SOURCE_PERMISSIONS OPTIONAL
					${_install_args})"
				)
			endif()
		endforeach()
	else()
		install(TARGETS ${p_name}
			BUNDLE DESTINATION "."
		)
	endif()

	# Installer
	if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
		set(ISS_FILES_DIR ${PROJECT_BINARY_DIR}/distrib/vst3)
		set(ISS_PACKAGE_DIR ${CMAKE_BINARY_DIR}/distrib)
		if (ENABLE_FULL_VERSION)
			set(ISS_PACKAGE_NAME "${_ARGS_NAME} (VST 3.x, ${${CMAKE_PROJECT_NAME}_${_ARGS_NAME}_SEMANTIC_VERSION}, ${${CMAKE_PROJECT_NAME}_SEMANTIC_VERSION})")
		else()
			set(ISS_PACKAGE_NAME "${_ARGS_NAME} (Demo, VST 3.x, ${${CMAKE_PROJECT_NAME}_${_ARGS_NAME}_SEMANTIC_VERSION}, ${${CMAKE_PROJECT_NAME}_SEMANTIC_VERSION})")
		endif()
		configure_file(
			"${CMAKE_SOURCE_DIR}/templates/installer/vst3.iss.in"
			"installer/vst3.iss"
		)

		add_custom_target("${_ARGS_NAME}.Installer.VST3"
			COMMAND ${CMAKE_COMMAND} -E rm -r -f -- "${ISS_FILES_DIR}"
			COMMAND ${CMAKE_COMMAND} "--install" "${CMAKE_BINARY_DIR}" "--config" "$<CONFIG>" "--component" "${_ARGS_NAME}.Installer.VST3" "--prefix" "${ISS_FILES_DIR}"
			COMMAND_EXPAND_LISTS
			DEPENDS "${_ARGS_NAME}"
		)
		set_target_properties("${_ARGS_NAME}.Installer.VST3" PROPERTIES
			FOLDER "TonPlugins/Plugins/${_ARGS_NAME}"
			PROJECT_LABEL "${_ARGS_NAME}.Installer.VST3"
		)
		add_custom_command(TARGET "${_ARGS_NAME}.Installer.VST3" POST_BUILD
			COMMAND "${ISS_PATH}/iscc.exe"
			ARGS "${PROJECT_BINARY_DIR}/installer/vst3.iss"
		)
	endif()
endfunction()

function(define_interface_vst2)
	cmake_parse_arguments(PARSE_ARGV 0
		_ARGS
		""
		"NAME;UUID"
		""
	)
	if(NOT _ARGS_UUID)
		generate_guid("${_ARGS_NAME}.vst2" _ARGS_UUID)
	endif()
	message(STATUS "VST 2.x UUID is ${_ARGS_UUID}")

	if(UNIX OR APPLE)
		return()
	endif()

	target_compile_definitions(${_ARGS_NAME} PRIVATE
		TONPLUGINS_VST2
	)
	target_link_libraries(${_ARGS_NAME} PUBLIC
		# Steinberg VST2 SDK
		vst2sdk
	)

	# Add to global interface target
	add_dependencies(VST2 ${_ARGS_NAME})

	# Packaging/Installing
	calculate_install_path("${_ARGS_NAME}.vst2" _content_path _resource_path _binary_path)
	if(NOT APPLE)
		foreach(_V INSTALL;INSTALLER)
			if(_V STREQUAL "INSTALL")
				set(_path "${INSTALL_PREFIX_VST2}/TonPlugins/${_ARGS_NAME}/")
				set(_install_args "")
			else()
				set(_path "")
				set(_install_args "COMPONENT ${_ARGS_NAME}.Installer.VST2 EXCLUDE_FROM_ALL")
			endif()

			# - Resources
			cmake_language(EVAL CODE "install(
				DIRECTORY \"${${_ARGS_NAME}_SOURCE_DIR}/resources/\"
				DESTINATION \"${_path}${_resource_path}\"
				USE_SOURCE_PERMISSIONS OPTIONAL
				${_install_args})"
			)
			cmake_language(EVAL CODE "install(
				DIRECTORY \"${${_ARGS_NAME}_BINARY_DIR}/resources/\"
				DESTINATION \"${_path}${_resource_path}\"
				USE_SOURCE_PERMISSIONS OPTIONAL
				${_install_args})"
			)

			# - Binaries
			cmake_language(EVAL CODE "install(
				FILES \"$<TARGET_FILE:${_ARGS_NAME}>\"
				DESTINATION \"${_path}${_binary_path}\"
				RENAME \"$<TARGET_FILE_BASE_NAME:${_ARGS_NAME}>${CMAKE_SHARED_MODULE_SUFFIX}\"
				${_install_args})"
			)
			if(MSVC)
				cmake_language(EVAL CODE "install(
					FILES \"$<TARGET_PDB_FILE:${_ARGS_NAME}>\"
					DESTINATION \"${_path}${_binary_path}\"
					OPTIONAL
					${_install_args})"
				)
			endif()

			# - Extra Files
			if(D_PLATFORM_WINDOWS)
				# 'desktop.ini'
				cmake_language(EVAL CODE "install(
					FILES \"other/desktop.ini\"
					DESTINATION \"${_path}\"
					USE_SOURCE_PERMISSIONS OPTIONAL
					${_install_args})"
				)

				# 'icon.ico'
				cmake_language(EVAL CODE "install(
					FILES \"other/icon.ico\"
					DESTINATION \"${_path}\"
					USE_SOURCE_PERMISSIONS OPTIONAL
					${_install_args})"
				)
			endif()
		endforeach()
	endif()

	# Installer
	if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
		set(ISS_FILES_DIR ${PROJECT_BINARY_DIR}/distrib/vst2)
		set(ISS_PACKAGE_DIR ${CMAKE_BINARY_DIR}/distrib)
		if (ENABLE_FULL_VERSION)
			set(ISS_PACKAGE_NAME "${_ARGS_NAME} (VST 2.x, ${${CMAKE_PROJECT_NAME}_${_ARGS_NAME}_SEMANTIC_VERSION}, ${${CMAKE_PROJECT_NAME}_SEMANTIC_VERSION})")
		else()
			set(ISS_PACKAGE_NAME "${_ARGS_NAME} (Demo, VST 2.x, ${${CMAKE_PROJECT_NAME}_${_ARGS_NAME}_SEMANTIC_VERSION}, ${${CMAKE_PROJECT_NAME}_SEMANTIC_VERSION})")
		endif()
		configure_file(
			"${CMAKE_SOURCE_DIR}/templates/installer/vst2.iss.in"
			"installer/vst2.iss"
		)

		add_custom_target("${_ARGS_NAME}.Installer.VST2"
			COMMAND ${CMAKE_COMMAND} -E rm -r -f -- "${ISS_FILES_DIR}"
			COMMAND ${CMAKE_COMMAND} "--install" "${CMAKE_BINARY_DIR}" "--config" "$<CONFIG>" "--component" "${_ARGS_NAME}.Installer.VST2" "--prefix" "${ISS_FILES_DIR}"
			COMMAND_EXPAND_LISTS
			DEPENDS "${_ARGS_NAME}"
		)
		set_target_properties("${_ARGS_NAME}.Installer.VST2" PROPERTIES
			FOLDER "TonPlugins/Plugins/${_ARGS_NAME}"
			PROJECT_LABEL "${_ARGS_NAME}.Installer.VST2"
		)
		add_custom_command(TARGET "${_ARGS_NAME}.Installer.VST2" POST_BUILD
			COMMAND "${ISS_PATH}/iscc.exe"
			ARGS "${PROJECT_BINARY_DIR}/installer/vst2.iss"
		)
	endif()
endfunction()

function(define_interface_aax)
	cmake_parse_arguments(PARSE_ARGV 0
		_ARGS
		""
		"NAME;UUID"
		""
	)
	if(NOT _ARGS_UUID)
		generate_guid("${_ARGS_NAME}.aax" _ARGS_UUID)
	endif()
	message("AAX UUID is ${_ARGS_UUID}")

	# Add to global interface target
	add_dependencies(AAX ${p_name})
endfunction()

function(define_plugin)
	cmake_parse_arguments(PARSE_ARGV 0
		_ARGS
		"VST2;AAX"
		"NAME;VST3_UUID;VST2_UUID;AAX_UUID"
		""
	)
	define_target(${_ARGS_NAME} MODULE)

	# List it in the correct directory.
	set_target_properties(${_ARGS_NAME} PROPERTIES
		FOLDER "TonPlugins/Plugins/${_ARGS_NAME}"
		PROJECT_LABEL "${_ARGS_NAME}"
	)

	# Add the common library to the whole mix.
	target_link_libraries(${_ARGS_NAME} PUBLIC
		# TonPlugins
		TonPlugIns::Core
		# Steinberg VST3 SDK
		sdk
	)

	# Add VSTGUI
	target_link_libraries(${_ARGS_NAME} PUBLIC vstgui_support )
	target_compile_definitions(${_ARGS_NAME} PUBLIC $<$<CONFIG:Debug>:VSTGUI_LIVE_EDITING=1> )

	# Define Interfaces
	define_interface_vst3(NAME ${_ARGS_NAME} UUID ${_ARGS_VST3_UUID}) # VST 3.x
	if(_ARGS_VST2)
		define_interface_vst2(NAME ${_ARGS_NAME} UUID ${_ARGS_VST2_UUID}) # VST 2.x
	endif()
	if(_ARGS_AAX)
		define_interface_aax(NAME ${_ARGS_NAME} UUID ${_ARGS_AAX_UUID}) # AAX
	endif()
endfunction()

################################################################################
# APIs
################################################################################

# VST 2.x
#add_subdirectory("${PROJECT_SOURCE_DIR}/third-party/vst2sdk")
file(GLOB_RECURSE VST2SDK_H FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/third-party/vst2sdk/*.h")
file(GLOB_RECURSE VST2SDK_HPP FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/third-party/vst2sdk/*.hpp")
file(GLOB_RECURSE VST2SDK_C FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/third-party/vst2sdk/*.c")
file(GLOB_RECURSE VST2SDK_CPP FOLLOW_SYMLINKS CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/third-party/vst2sdk/*.cpp")
source_group(TREE "${PROJECT_SOURCE_DIR}/third-party/vst2sdk/" FILES ${VST2SDK_H} ${VST2SDK_HPP} ${VST2SDK_C} ${VST2SDK_CPP})
add_library(vst2sdk STATIC
	${VST2SDK_H}
	${VST2SDK_HPP}
	${VST2SDK_C}
	${VST2SDK_CPP}
)
target_include_directories(vst2sdk PUBLIC
	"${PROJECT_SOURCE_DIR}/third-party/vst2sdk"
)
set_target_properties(vst2sdk PROPERTIES
	FOLDER "Steinberg"
)
setup_target_compiler(vst2sdk)

# VST 3.x
set(SMTG_ADD_VST3_UTILITIES OFF CACHE BOOL "" FORCE)
set(STMG_CREATE_BUNDLE_FOR_WINDOWS OFF CACHE BOOL "" FORCE)
set(SMTG_CXX_STANDARD "23" CACHE STRING "" FORCE)
set(SMTG_ENABLE_VST3_HOSTING_EXAMPLES OFF CACHE BOOL "" FORCE)
set(SMTG_ENABLE_VST3_PLUGIN_EXAMPLES OFF CACHE BOOL "" FORCE)
set(SMTG_ENABLE_VSTGUI_SUPPORT ON CACHE BOOL "" FORCE)
set(SMTG_USE_STATIC_CRT ON CACHE BOOL "" FORCE)
set(SMTG_RUN_VST_VALIDATOR OFF CACHE BOOL "" FORCE)
set(SMTG_CREATE_MODULE_INFO OFF CACHE BOOL "" FORCE)
add_subdirectory("${PROJECT_SOURCE_DIR}/third-party/vst3sdk")
set_target_properties(base cmake_modules cmake_VST_modules pluginterfaces sdk sdk_common sdk_hosting vstgui vstgui_standalone vstgui_support vstgui_uidescription validator PROPERTIES
	FOLDER "Steinberg"
)

################################################################################
# Common Targets
################################################################################
add_custom_target(VST2)

add_custom_target(VST3)

add_custom_target(AAX)

set_target_properties(
	VST2 VST3 AAX
	PROPERTIES
		FOLDER "Interfaces"
)

################################################################################
# Common Library
################################################################################
file(GLOB library_list LIST_DIRECTORIES true "library/**")
foreach(library ${library_list})
	add_subdirectory(${library})
endforeach()

################################################################################
# Plugins
################################################################################

file(GLOB plugins_list LIST_DIRECTORIES true "plugins/**")
foreach(plugin ${plugins_list})
	add_subdirectory(${plugin})
endforeach()
